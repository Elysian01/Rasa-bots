
## Intro to chatbot and its uses

Two types of chatbot is rule-based(used by developers) and AI
AI Chatbot understands the intend of user using NLP

- Chatbot is available 24x7
- Uniform user experience irrespective of geography location

- RASA is an open source framework to build high performance chatbots it understands the messages and hold important info 
(name,address) it uses ML and DL

- RASA X runs on top of open souce version 
	- Ability to choose model
	- deploy new updates to users



## Architecture of RASA

## Installation 

Create New env
	= pip install venv
	= python -m venv env_name

= pip install rasa
= pip install rasa-x -i https://pypi.rasa.com/simple (for data gui experience)
= pip install spacy
= python -m spacy download en
= python -m spacy download en_core_web_md 
= python -m spacy link en_core_web_md en


## Commands
rasa init 
rasa train (to retrain)
rasa shell (to start chatbot)
rasa x (to chat in gui)
rasa run (during deployment to run bot)

- rasa train nlu (to train acc config pipeline)
- rasa shell nlu (gives addition info (confidence,etc)) 


## Data
- intent ==> category (greet,goodbye,happy)
- text, image ==> used for req and res
- entities ==> getting info from text

## FLOW := user query => intend is identified (nlu.md) => follow up statement (stories.md) => give response (domain.yml)


## Data File
nlu.md (intent) ==> used to handle and map the user request
stories.md (stories) ==> it maps nlu mapping to responses mapping
domain.yml ==> consists of req intents and responses text and intent


## Uses
- Customer Support
- FAQ
- Addressing Grivances (Customer Complain , book tokens for complaining)
- Appointment Booking (flight,train,movie)
- Automation of routine task (playing music,during work b/w employing addressing logs,url,etc)
- Address a query (weather, meaning of words)


## Channels
- Telegram, Slack, Microsoft Bot framework
- Website
- Facebook messenger, google hangouts chat


## Building

- data => greetings + explain what the bot can do 
- pipeline => sequence of processing step which are used to extract certain text features and components which allow the model to learn the underlying pattern from the provided examples

=> pipeline (config.yml)
	- pretrained_embeddings_spacy (word to vector, similar word means similar vector)
		- better model performance for less data
		- do not cover domain specific words (since train from general data (wikipedia))

	- supervised_embeddings
		- learns everthing from scratch
		- making domain specific
		- advance cases i.e having multiple intent

=> pipeline components

	==> order of components matter (o/p o fone is given to another)
	==> examples classes should be balanced means equal number of examples
	==> punctuations and emoji are not extracted , so they don't matter
	==> intent classification is case insensitive, 
	==> don't create similar intents instead make one intent and handle in core to perform actions
	==> for user typos => use spell checker   
	
	
	- SpacyNLP => loading spacy model 
	- WhitespaceTokenizer => split sentences into words
	- SpacyTokenizer => for pretrained 
	- CRFEntityExtractor => recoginizes entity based on the surronding words []
	- DucklingHttpExtractor => to extracts email, numbers, phone numbers , zip code, etc
	- RegexFeaturizer
	
	- CountVectorsFeaturizer => counts how many times this word appear in your msg and training data
	- EmbeddingIntentClassifier => gives intent, confidence , it maximise the similarity
	
	- SpacyFeaturizer => extract features
	- SklearnIntentClassifier => uses SVM on features extracted from spacy featurizer
	
- Use Regular Expression => pattern matching
- Look up table => example for countries (only 210)


## Slots

- varaibles to store imp info during converstaions
- type ==> text, bool, categorical (values low,medium ,high), float (min_value: 0.0), list, unfeaturized, 

























